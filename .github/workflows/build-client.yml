name: Build Client

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'client/**'
      - 'requirements.txt'
      - '.github/workflows/build-client.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'client/**'
      - 'requirements.txt'
      - '.github/workflows/build-client.yml'
  workflow_dispatch:

jobs:
  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x86, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Nuitka
        run: |
          pip install nuitka>=2.7.0,<3.0.0
          
      - name: Build client for Windows (${{ matrix.architecture }})
        shell: pwsh
        run: |
          cd client
          # 根据架构设置环境变量
          if ("${{ matrix.architecture }}" -eq "x86") {
            $env:PYTHON_ARCH = "32"
            $outputName = "net-manager-client-win-x86.exe"
          } else {
            $env:PYTHON_ARCH = "64"
            $outputName = "net-manager-client-win-x64.exe"
          }
          
          # 使用Nuitka打包
          python -m nuitka `
            --standalone `
            --onefile `
            --output-filename="$outputName" `
            --windows-product-name="NetManager Client" `
            --windows-company-name="NetManager" `
            --product-version="1.0.0" `
            --file-version="1.0.0" `
            --windows-console-mode=hide `
            --enable-plugin=multiprocessing `
            --follow-imports `
            --include-package=src `
            --python-flag=-O `
            --lto=yes `
            --remove-output `
            main.py
            
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: net-manager-client-windows-${{ matrix.architecture }}
          path: client/net-manager-client-win-${{ matrix.architecture }}.exe
          
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x86, arm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Nuitka
        run: |
          pip install nuitka>=2.7.0,<3.0.0
          
      - name: Install system dependencies (Linux x86)
        if: matrix.architecture == 'x86'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib
          
      - name: Build client for Linux (${{ matrix.architecture }})
        run: |
          cd client
          
          # 根据架构设置编译选项
          if [ "${{ matrix.architecture }}" = "x86" ]; then
            export CC="gcc -m32"
            export CXX="g++ -m32"
            OUTPUT_NAME="net-manager-client-linux-x86"
          else
            OUTPUT_NAME="net-manager-client-linux-arm"
          fi
          
          # 使用Nuitka打包
          python -m nuitka \
            --standalone \
            --onefile \
            --output-filename="$OUTPUT_NAME" \
            --product-version="1.0.0" \
            --file-version="1.0.0" \
            --enable-plugin=multiprocessing \
            --follow-imports \
            --include-package=src \
            --python-flag=-O \
            --lto=yes \
            --remove-output \
            main.py
            
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: net-manager-client-linux-${{ matrix.architecture }}
          path: client/net-manager-client-linux-${{ matrix.architecture }}
          
  release:
    name: Create Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          
      - name: Display structure of downloaded files
        run: ls -R dist/
        
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          
      - name: Upload Release Assets (Windows x86)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/net-manager-client-windows-x86/net-manager-client-win-x86.exe
          asset_name: net-manager-client-windows-x86.exe
          asset_content_type: application/octet-stream
          
      - name: Upload Release Assets (Windows x64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/net-manager-client-windows-x64/net-manager-client-win-x64.exe
          asset_name: net-manager-client-windows-x64.exe
          asset_content_type: application/octet-stream
          
      - name: Upload Release Assets (Linux x86)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/net-manager-client-linux-x86/net-manager-client-linux-x86
          asset_name: net-manager-client-linux-x86
          asset_content_type: application/octet-stream
          
      - name: Upload Release Assets (Linux ARM)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/net-manager-client-linux-arm/net-manager-client-linux-arm
          asset_name: net-manager-client-linux-arm
          asset_content_type: application/octet-stream