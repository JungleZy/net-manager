name: Test Then Build

on:
  push:
    branches: [main, develop]
    paths:
      - 'client/**'
      - 'server/**'
      - 'requirements.txt'
      - '.github/workflows/test-then-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'client/**'
      - 'server/**'
      - 'requirements.txt'
      - '.github/workflows/test-then-build.yml'
  workflow_dispatch:

jobs:
  test-windows:
    name: Test on Windows
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, x86, arm]
        python-version: ['3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Create logs directory
        run: |
          mkdir client\logs
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          cd client
          python -m pytest -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./client/coverage.xml
          flags: windows
          name: codecov-umbrella
        if: github.repository == 'your-username/net-manager' && github.event_name != 'pull_request'

  test-linux:
    name: Test on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x64, x86, arm, arm64]
        python-version: ['3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Create logs directory
        run: |
          mkdir -p client/logs
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          cd client
          python -m pytest -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./client/coverage.xml
          flags: linux
          name: codecov-umbrella
        if: github.repository == 'your-username/net-manager' && github.event_name != 'pull_request'

  test-summary:
    name: Test Summary
    needs: [test-windows, test-linux]
    runs-on: ubuntu-latest
    steps:
      - name: All tests passed
        run: echo "All cross-platform tests completed successfully!"

  build-windows:
    name: Build for Windows
    needs: [test-summary] # 只有在测试成功完成后才执行打包
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, x86, arm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Get current date
        id: date
        run: |
          echo "date=$(Get-Date -Format 'yyyyMMdd')" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "nuitka>=2.7.0,<3.0.0"
          pip install -r requirements.txt

      - name: Build client for Windows (${{ matrix.architecture }})
        id: build
        shell: pwsh
        run: |
          cd client
          # 根据架构设置环境变量
          if ("${{ matrix.architecture }}" -eq "x86") {
            $outputName = "net-manager-client-win-x86.exe"
          } else {
            $outputName = "net-manager-client-win-x64.exe"
          }

          # 使用Nuitka打包，添加--assume-yes-for-downloads参数避免交互式询问
          python -m nuitka `
            --standalone `
            --onefile `
            --output-filename="$outputName" `
            --windows-product-name="NetManagerClient" `
            --product-version="1.0.0" `
            --file-version="1.0.0" `
            --windows-console-mode=hide `
            --windows-uac-admin `
            --enable-plugin=multiprocessing `
            --follow-imports `
            --follow-stdlib `
            --include-package=src `
            --python-flag=-O `
            --lto=yes `
            --assume-yes-for-downloads `
            --static-libpython=no `
            --noinclude-unittest-mode=allow `
            --disable-ccache `
            --no-pyi-file `
            --remove-output `
            main.py
            
          # 设置输出变量供后续步骤使用
          echo "outputName=$outputName" >> $env:GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: net-manager-client-windows-${{ matrix.architecture }}
          path: client/${{ steps.build.outputs.outputName }}

  build-linux:
    name: Build for Linux
    needs: [test-summary] # 只有在测试成功完成后才执行打包
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x64, x86, arm, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "nuitka>=2.7.0,<3.0.0"
          pip install -r requirements.txt

      - name: Install system dependencies (Linux x86)
        if: matrix.architecture == 'x86'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib

      - name: Build client for Linux (${{ matrix.architecture }})
        id: build
        run: |
          cd client

          # 根据架构设置编译选项
          if [ "${{ matrix.architecture }}" = "x86" ]; then
            export OUTPUT_NAME="net-manager-client-linux-x86"
          else
            export OUTPUT_NAME="net-manager-client-linux-arm"
          fi

          # 设置输出变量供后续步骤使用
          echo "outputName=$OUTPUT_NAME" >> $GITHUB_OUTPUT

          # 使用Nuitka打包
          python -m nuitka \
            --standalone \
            --onefile \
            --output-filename="$OUTPUT_NAME" \
            --product-version="1.0.0" \
            --file-version="1.0.0" \
            --enable-plugin=multiprocessing \
            --follow-imports \
            --include-package=src \
            --python-flag=-O \
            --lto=yes \
            --remove-output \
            main.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: net-manager-client-linux-${{ matrix.architecture }}
          path: client/${{ steps.build.outputs.outputName }}

  release:
    name: Create Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Display structure of downloaded files
        run: ls -R dist/

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            dist/net-manager-client-windows-x86/net-manager-client-win-x86.exe
            dist/net-manager-client-windows-x64/net-manager-client-win-x64.exe
            dist/net-manager-client-linux-x86/net-manager-client-linux-x86
            dist/net-manager-client-linux-arm/net-manager-client-linux-arm
            dist/net-manager-client-linux-arm64/net-manager-client-linux-arm64
